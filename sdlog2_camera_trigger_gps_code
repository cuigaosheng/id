diff --git a/src/modules/commander/commander.cpp b/src/modules/commander/commander.cpp
index 45f9e6a..85ed573 100644
--- a/src/modules/commander/commander.cpp
+++ b/src/modules/commander/commander.cpp
@@ -2705,6 +2705,7 @@ int commander_thread_main(int argc, char *argv[])
 
 				if (internal_state.main_state != commander_state_s::MAIN_STATE_MANUAL &&
 						internal_state.main_state != commander_state_s::MAIN_STATE_ACRO &&
+						internal_state.main_state != commander_state_s::MAIN_STATE_ALTCTL &&
 						internal_state.main_state != commander_state_s::MAIN_STATE_STAB &&
 						internal_state.main_state != commander_state_s::MAIN_STATE_RATTITUDE &&
 						!land_detector.landed) {
diff --git a/src/modules/sdlog2/sdlog2.c b/src/modules/sdlog2/sdlog2.c
index 4296422..3679959 100644
--- a/src/modules/sdlog2/sdlog2.c
+++ b/src/modules/sdlog2/sdlog2.c
@@ -114,7 +114,6 @@
 #include "logbuffer.h"
 #include "sdlog2_format.h"
 #include "sdlog2_messages.h"
-
 #define PX4_EPOCH_SECS 1234567890L
 
 #define LOGBUFFER_WRITE_AND_COUNT(_msg) pthread_mutex_lock(&logbuffer_mutex); \
@@ -213,6 +212,38 @@ __EXPORT int sdlog2_main(int argc, char *argv[]);
 static bool copy_if_updated(orb_id_t topic, int *handle, void *buffer);
 static bool copy_if_updated_multi(orb_id_t topic, int multi_instance, int *handle, void *buffer);
 
+#define CAMERA_TRIGGER_POS_SAVE_DEBUG 1
+
+#if  CAMERA_TRIGGER_POS_SAVE_DEBUG 
+int pos_file_fd = -1;
+int camera_pos_order = 0;
+double camera_trigger_gps_lon = 0.0f;
+double camera_trigger_gps_lat = 0.0f; 
+double camera_trigger_gps_alt = 0.0f;
+bool camera_trigger_gps_updated = false;
+int camera_gps_fix_type = 0;
+double camera_psi_gps = 0.0f;
+
+/**
+*Calucate string's length for camera_pos's buffer.
+*/
+int camera_pos_strlen_cal(char *s);
+
+/**
+*Start save pos data when vehicle armed.
+*/
+int camera_pos_start_log(void);
+
+/**
+*Stop save pos data when vehicle armed.
+*/
+int camera_pos_stop_log(void);
+
+/**
+*Save pos data for camera trigger once.
+*/
+int camera_pos_save_once(int trigger_seq, double lon, double lat, double alt, double pitch, double roll, double yaw, double psi_gps, struct tm* tt);
+#endif
 /**
  * Mainloop of sd log deamon.
  */
@@ -499,6 +530,8 @@ int create_log_dir()
 	return 0;
 }
 
+
+
 int open_log_file()
 {
 	/* string to hold the path to the log */
@@ -945,6 +978,58 @@ bool copy_if_updated_multi(orb_id_t topic, int multi_instance, int *handle, void
 	return updated;
 }
 
+#if CAMERA_TRIGGER_POS_SAVE_DEBUG 
+int camera_pos_strlen_cal(char *s){
+	int i;
+
+	for(i=0; s[i]!='\r'; i++){
+	}
+	i+=2;
+
+	return i;
+}
+
+int camera_pos_start_log(void){
+	char str[500]="";
+
+	pos_file_fd = open_perf_file("camera_pos");
+	sprintf(str, "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\r\n", "ID", "Lon","Lat","Alt","Pitch","Roll","Yaw", "Psi_GPS", "Time");
+
+	int str_len;
+	str_len = camera_pos_strlen_cal(str);
+	if(pos_file_fd!=-1){
+		write(pos_file_fd, str, str_len);
+	}
+	camera_pos_order = 1; //From arm to disarm is a file.
+
+	return 0;
+}
+
+int camera_pos_stop_log(void){
+
+	close(pos_file_fd);
+	pos_file_fd = -1;
+
+	return 0;
+}
+
+int camera_pos_save_once(int trigger_seq, double lon, double lat, double alt, double roll, double pitch, double yaw, double psi_gps, struct tm* tt){
+	char now_date[50] = "";
+
+	sprintf(now_date, "%d%02d%02d%02d%02d%02d", 1900+tt->tm_year, 1+tt->tm_mon, tt->tm_mday, tt->tm_hour, tt->tm_min, tt->tm_sec);
+
+	char str[500] = "";
+	sprintf(str, "%d\t%3.6lf\t%3.6lf\t%3.6lf\t%3.6lf\t%3.6lf\t%3.6lf\t%3.6lf\t%s\r\n", trigger_seq, lon, lat, alt, pitch, roll, yaw, psi_gps, now_date);
+
+	int str_len;
+	str_len = camera_pos_strlen_cal(str);
+	write(pos_file_fd, str, str_len);
+	camera_pos_order++;
+
+	return 0;
+}
+#endif
+
 int sdlog2_thread_main(int argc, char *argv[])
 {
 	/* default log rate: 50 Hz */
@@ -1732,7 +1817,6 @@ int sdlog2_thread_main(int argc, char *argv[])
 
 			/* --- GPS POSITION - UNIT #1 --- */
 			if (gps_pos_updated) {
-
 				log_msg.msg_type = LOG_GPS_MSG;
 				log_msg.body.log_GPS.gps_time = buf_gps_pos.time_utc_usec;
 				log_msg.body.log_GPS.fix_type = buf_gps_pos.fix_type;
@@ -1749,9 +1833,55 @@ int sdlog2_thread_main(int argc, char *argv[])
 				log_msg.body.log_GPS.snr_mean = snr_mean;
 				log_msg.body.log_GPS.noise_per_ms = buf_gps_pos.noise_per_ms;
 				log_msg.body.log_GPS.jamming_indicator = buf_gps_pos.jamming_indicator;
+
+				#if CAMERA_TRIGGER_POS_SAVE_DEBUG
+				camera_trigger_gps_lon = (double)log_msg.body.log_GPS.lon * 0.0000001;
+				camera_trigger_gps_lat = (double)log_msg.body.log_GPS.lat * 0.0000001;
+				camera_trigger_gps_alt = (double)log_msg.body.log_GPS.alt;
+				camera_trigger_gps_updated = gps_pos_updated;
+				camera_gps_fix_type = log_msg.body.log_GPS.fix_type; 
+				camera_psi_gps = atan2((double)log_msg.body.log_GPS.vel_d ,(double)log_msg.body.log_GPS.vel_n);
+				
+				printf("fix_type1 = %d-%3.6lf-%3.6lf-%3.6lf\n", camera_gps_fix_type, (double)log_msg.body.log_GPS.lon * 0.0000001, (double)log_msg.body.log_GPS.lat *  0.0000001, (double)log_msg.body.log_GPS.alt);
+				#endif
 				LOGBUFFER_WRITE_AND_COUNT(GPS);
 			}
 
+			#if CAMERA_TRIGGER_POS_SAVE_DEBUG
+
+			if (pos_file_fd!=-1 && copy_if_updated(ORB_ID(camera_trigger), &subs.cam_trig_sub, &buf.camera_trigger)) {
+				struct tm tt;
+				if(get_log_time_tt(&tt, false)){
+					if (camera_trigger_gps_updated && (camera_gps_fix_type == 3)) {
+						printf("fix_type2 = %d-%3.6lf-%3.6lf-%3.6lf\n", camera_gps_fix_type, camera_trigger_gps_lon, camera_trigger_gps_lat, camera_trigger_gps_alt);
+						camera_pos_save_once(camera_pos_order, 
+									camera_trigger_gps_lon, 
+									camera_trigger_gps_lat, 
+									camera_trigger_gps_alt, 
+									(double)log_msg.body.log_ATT.pitch*57.3, 
+									(double)log_msg.body.log_ATT.roll*57.3, 
+									(double)log_msg.body.log_ATT.yaw*57.3, 
+									camera_psi_gps, 
+									&tt);	
+						camera_trigger_gps_updated = false;
+						camera_gps_fix_type = 0;
+					}else{
+						camera_pos_save_once(camera_pos_order, 
+									(double)0.0f, 
+									(double)0.0f, 
+									(double)log_msg.body.log_SENS.baro_alt,
+									(double)log_msg.body.log_ATT.pitch*57.3, 
+									(double)log_msg.body.log_ATT.roll*57.3, 
+									(double)log_msg.body.log_ATT.yaw*57.3, 
+									(double)0.0f, 
+									&tt);	
+					}
+				}
+			}
+			#endif
+
+
+
 			/* --- GPS POSITION - UNIT #2 --- */
 			if (copy_if_updated_multi(ORB_ID(vehicle_gps_position), 1, &subs.gps_pos_sub[1], &buf.dual_gps_pos)) {
 				log_msg.msg_type = LOG_DGPS_MSG;
@@ -2288,7 +2418,6 @@ int sdlog2_thread_main(int argc, char *argv[])
 			log_msg.body.log_ATT.yaw_rate = buf.att.yawspeed;
 			LOGBUFFER_WRITE_AND_COUNT(ATT);
 		}
-
 		/* --- CAMERA TRIGGER --- */
 		if (copy_if_updated(ORB_ID(camera_trigger), &subs.cam_trig_sub, &buf.camera_trigger)) {
 			log_msg.msg_type = LOG_CAMT_MSG;
@@ -2437,9 +2566,14 @@ void handle_status(struct vehicle_status_s *status)
 
 		if (flag_system_armed) {
 			sdlog2_start_log();
-
+			#if CAMERA_TRIGGER_POS_SAVE_DEBUG
+			camera_pos_start_log();
+			#endif
 		} else {
 			sdlog2_stop_log();
+			#if CAMERA_TRIGGER_POS_SAVE_DEBUG
+			camera_pos_stop_log();
+			#endif
 		}
 	}
 }
diff --git a/src/modules/systemlib/system_params.c b/src/modules/systemlib/system_params.c
index 2d784b0..618ff47 100644
--- a/src/modules/systemlib/system_params.c
+++ b/src/modules/systemlib/system_params.c
@@ -154,7 +154,7 @@ PARAM_DEFINE_INT32(SYS_PARAM_VER, 1);
  * @reboot_required true
  * @group System
  */
-PARAM_DEFINE_INT32(SYS_LOGGER, 1);
+PARAM_DEFINE_INT32(SYS_LOGGER, 0);
 
 /**
  * Enable stack checking
